#!/sbin/sh
# AnyKernel3 Backend (DO NOT CHANGE)
# osm0sis @ xda-developers

OUTFD=/proc/self/fd/$2;
ZIPFILE="$3";

BOOTMODE=false;
ps | grep zygote | grep -v grep >/dev/null && BOOTMODE=true;
$BOOTMODE || ps -A 2>/dev/null | grep zygote | grep -v grep >/dev/null && BOOTMODE=true;

DIR=/sdcard;
$BOOTMODE || DIR=$(dirname "$ZIPFILE");

[ -d /postinstall/tmp ] && POSTINSTALL=/postinstall;
[ "$AKHOME" ] || AKHOME=$POSTINSTALL/tmp/anykernel;
[ "$ANDROID_ROOT" ] || ANDROID_ROOT=/system;

ui_print() {
  until [ ! "$1" ]; do
    echo "ui_print $1
      ui_print" >> $OUTFD;
    shift;
  done;
}
ui_printfile() {
  while IFS='' read -r line || $BB [[ -n "$line" ]]; do
    ui_print "$line";
  done < $1;
}
show_progress() { echo "progress $1 $2" >> $OUTFD; }
file_getprop() { $BB grep "^$2=" "$1" | $BB tail -n1 | $BB cut -d= -f2-; }
find_slot() {
  local slot=$(getprop ro.boot.slot_suffix 2>/dev/null);
  [ "$slot" ] || slot=$($BB grep -o 'androidboot.slot_suffix=.*$' /proc/cmdline | $BB cut -d\  -f1 | $BB cut -d= -f2);
  if [ ! "$slot" ]; then
    slot=$(getprop ro.boot.slot 2>/dev/null);
    [ "$slot" ] || slot=$($BB grep -o 'androidboot.slot=.*$' /proc/cmdline | $BB cut -d\  -f1 | $BB cut -d= -f2);
    [ "$slot" ] && slot=_$slot;
  fi;
  [ "$slot" ] && echo "$slot";
}
setup_mountpoint() {
  [ -L $1 ] && $BB mv -f $1 ${1}_link;
  if [ ! -d $1 ]; then
    $BB rm -f $1;
    $BB mkdir -p $1;
  fi;
}
is_mounted() { $BB mount | $BB grep -q " $1 "; }
mount_apex() {
  [ -d /system_root/system/apex ] || return 1;
  local apex dest loop minorx num var;
  setup_mountpoint /apex;
  $BB mount -t tmpfs tmpfs /apex -o mode=755 && $BB touch /apex/apextmp;
  minorx=1;
  [ -e /dev/block/loop1 ] && minorx=$($BB ls -l /dev/block/loop1 | $BB awk '{ print $6 }');
  num=0;
  for apex in /system_root/system/apex/*; do
    dest=/apex/$($BB basename $apex | $BB sed -E -e 's;\.apex$|\.capex$;;' -e 's;\.current$|\.release$;;');
    $BB mkdir -p $dest;
    case $apex in
      *.apex|*.capex)
        $BB unzip -qo $apex original_apex -d /apex;
        [ -f /apex/original_apex ] && apex=/apex/original_apex;
        $BB unzip -qo $apex apex_payload.img -d /apex;
        $BB mv -f /apex/original_apex $dest.apex 2>/dev/null;
        $BB mv -f /apex/apex_payload.img $dest.img;
        $BB mount -t ext4 -o ro,noatime $dest.img $dest 2>/dev/null;
        if [ $? != 0 ]; then
          while [ $num -lt 64 ]; do
            loop=/dev/block/loop$num;
            [ -e $loop ] || $BB mknod $loop b 7 $((num * minorx));
            $BB losetup $loop $dest.img 2>/dev/null;
            num=$((num + 1));
            $BB losetup $loop | $BB grep -q $dest.img && break;
          done;
          $BB mount -t ext4 -o ro,loop,noatime $loop $dest;
          if [ $? != 0 ]; then
            $BB losetup -d $loop 2>/dev/null;
          fi;
        fi;
      ;;
      *) $BB mount -o bind $apex $dest;;
    esac;
  done;
  for var in $($BB grep -o 'export .* /.*' /system_root/init.environ.rc | $BB awk '{ print $2 }'); do
    eval OLD_${var}=\$$var;
  done;
  $($BB grep -o 'export .* /.*' /system_root/init.environ.rc | $BB sed 's; /;=/;'); unset export;
}
umount_apex() {
  [ -d /apex ] || return 1;
  local dest loop var;
  for var in $($BB grep -o 'export .* /.*' /system_root/init.environ.rc 2>/dev/null | $BB awk '{ print $2 }'); do
    if [ "$(eval echo \$OLD_$var)" ]; then
      eval $var=\$OLD_${var};
    else
      eval unset $var;
    fi;
    unset OLD_${var};
  done;
  for dest in $($BB find /apex -type d -mindepth 1 -maxdepth 1); do
    loop=$($BB mount | $BB grep $dest | $BB grep loop | $BB cut -d\  -f1);
    $BB umount -l $dest;
    [ "$loop" ] && $BB losetup -d $loop;
  done;
  [ -f /apex/apextmp ] && $BB umount /apex;
  $BB rm -rf /apex 2>/dev/null;
}
mount_all() {
  local byname mount slot system;
  if ! is_mounted /cache; then
    $BB mount /cache 2>/dev/null && UMOUNT_CACHE=1;
  fi;
  if ! is_mounted /data; then
    $BB mount /data && UMOUNT_DATA=1;
  fi;
  (for mount in /vendor /product /system_ext /persist; do
    $BB mount -o ro -t auto $mount;
  done) 2>/dev/null;
  setup_mountpoint $ANDROID_ROOT;
  if ! is_mounted $ANDROID_ROOT; then
    $BB mount -o ro -t auto $ANDROID_ROOT 2>/dev/null;
  fi;
  byname=bootdevice/by-name;
  [ -d /dev/block/$byname ] || byname=$($BB find /dev/block/platform -type d -name by-name 2>/dev/null | $BB head -n1 | $BB cut -d/ -f4-);
  [ -d /dev/block/mapper ] && byname=mapper;
  [ -e /dev/block/$byname/system ] || slot=$(find_slot);
  case $ANDROID_ROOT in
    /system_root) setup_mountpoint /system;;
    /system)
      if ! is_mounted /system && ! is_mounted /system_root; then
        setup_mountpoint /system_root;
        $BB mount -o ro -t auto /system_root;
      elif [ -f /system/system/build.prop ]; then
        setup_mountpoint /system_root;
        $BB mount --move /system /system_root;
      fi;
      if [ $? != 0 ]; then
        ($BB umount /system;
        $BB umount -l /system) 2>/dev/null;
        $BB mount -o ro -t auto /dev/block/$byname/system$slot /system_root;
      fi;
    ;;
  esac;
  [ -f /system_root/system/build.prop ] && system=/system;
  for mount in /vendor /product /system_ext; do
    if ! is_mounted $mount && [ -L /system$mount -o -L /system_root$system$mount ]; then
      setup_mountpoint $mount;
      $BB mount -o ro -t auto /dev/block/$byname$mount$slot $mount;
    fi;
  done;
  if is_mounted /system_root; then
    mount_apex;
    $BB mount -o bind /system_root$system /system;
  fi;
  if ! is_mounted /persist && [ -e /dev/block/bootdevice/by-name/persist ]; then
    setup_mountpoint /persist;
    $BB mount -o ro -t auto /dev/block/bootdevice/by-name/persist /persist;
  fi;
}
umount_all() {
  local mount;
  (if [ ! -d /postinstall/tmp ]; then
    $BB umount /system;
    $BB umount -l /system;
  fi) 2>/dev/null;
  umount_apex;
  (if [ ! -d /postinstall/tmp ]; then
    $BB umount /system_root;
    $BB umount -l /system_root;
  fi;
  umount /vendor; # busybox umount /vendor breaks recovery on some hacky devices
  umount -l /vendor;
  for mount in /mnt/system /mnt/vendor /product /mnt/product /system_ext /mnt/system_ext /persist; do
    $BB umount $mount;
    $BB umount -l $mount;
  done;
  if [ "$UMOUNT_DATA" ]; then
    $BB umount /data;
    $BB umount -l /data;
  fi;
  if [ "$UMOUNT_CACHE" ]; then
    $BB umount /cache;
    $BB umount -l /cache;
  fi) 2>/dev/null;
}
setup_env() {
  $BOOTMODE && return 1;
  $BB mount -o bind /dev/urandom /dev/random;
  if [ -L /etc ]; then
    setup_mountpoint /etc;
    $BB cp -af /etc_link/* /etc;
    $BB sed -i 's; / ; /system_root ;' /etc/fstab;
  fi;
  umount_all;
  mount_all;
  OLD_LD_PATH=$LD_LIBRARY_PATH;
  OLD_LD_PRE=$LD_PRELOAD;
  OLD_LD_CFG=$LD_CONFIG_FILE;
  unset LD_LIBRARY_PATH LD_PRELOAD LD_CONFIG_FILE;
  if [ ! "$(getprop 2>/dev/null)" ]; then
    getprop() {
      local propdir propfile propval;
      for propdir in / /system_root /system /vendor /product /system_ext /odm; do
        for propfile in default.prop build.prop; do
          if [ "$propval" ]; then
            break 2;
          else
            propval="$(file_getprop $propdir/$propfile $1 2>/dev/null)";
          fi;
        done;
      done;
      if [ "$propval" ]; then
        echo "$propval";
      else
        echo "";
      fi;
    }
  elif [ ! "$(getprop ro.build.type 2>/dev/null)" ]; then
    getprop() {
      ($(which getprop) | $BB grep "$1" | $BB cut -d[ -f3 | $BB cut -d] -f1) 2>/dev/null;
    }
  fi;
}
restore_env() {
  $BOOTMODE && return 1;
  local dir;
  unset -f getprop;
  [ "$OLD_LD_PATH" ] && export LD_LIBRARY_PATH=$OLD_LD_PATH;
  [ "$OLD_LD_PRE" ] && export LD_PRELOAD=$OLD_LD_PRE;
  [ "$OLD_LD_CFG" ] && export LD_CONFIG_FILE=$OLD_LD_CFG;
  unset OLD_LD_PATH OLD_LD_PRE OLD_LD_CFG;
  umount_all;
  [ -L /etc_link ] && $BB rm -rf /etc/*;
  (for dir in /etc /apex /system_root /system /vendor /product /system_ext /persist; do
    if [ -L "${dir}_link" ]; then
      rmdir $dir;
      $BB mv -f ${dir}_link $dir;
    fi;
  done;
  $BB umount -l /dev/random) 2>/dev/null;
}
debugging() {
  case $($BB basename "$ZIPFILE" .zip) in
    *-debugging)
      ui_print " " "Creating debugging archive in $DIR...";
      [ -f /tmp/recovery.log ] && local log=/tmp/recovery.log;
      $BB tar -czf "$DIR/anykernel3-$(date +%Y-%m-%d_%H%M%S)-debug.tgz" $AKHOME $log;
    ;;
  esac;
}
cleanup() {
  cd $(dirname $AKHOME);
  rm -rf $AKHOME;
}
abort() {
  ui_print "$@";
  debugging;
  restore_env;
  if [ ! -f anykernel.sh -o "$(file_getprop anykernel.sh do.cleanuponabort 2>/dev/null)" == 1 ]; then
    cleanup;
  fi;
  exit 1;
}
do_devicecheck() {
  [ "$(file_getprop anykernel.sh do.devicecheck)" == 1 ] || return 1;
  local device devicename match product testname vendordevice vendorproduct;
  if [ "$REG" = "IDN" ];then
  ui_print "- Memeriksa Perangkat ...";
  elif [ "$REG" = "JAV" ];then
  ui_print "- Priksa Piranti ...";
  elif [ "$REG" = "SUN" ];then
  ui_print "- Pariksa Piranti ...";
  elif [ "$REG" = "HI" ];then
  ui_print "- Device ki jaanch jaari ...";
  elif [ "$REG" = "EN" ];then
  ui_print "- Checking Device ...";
  fi;
  device=$(getprop ro.product.device 2>/dev/null);
  product=$(getprop ro.build.product 2>/dev/null);
  vendordevice=$(getprop ro.product.vendor.device 2>/dev/null);
  vendorproduct=$(getprop ro.vendor.product.device 2>/dev/null);
  for testname in $($BB grep '^device.name.*=' anykernel.sh | $BB cut -d= -f2-); do
    for devicename in $device $product $vendordevice $vendorproduct; do
      if [ "$devicename" == "$testname" ]; then
        ui_print "- OK ! ";
        match=1;
        break 2;
      fi;
    done;
  done;
  if [ ! "$match" ]; then
	if [ "$REG" = "IDN" ];then
	abort "! Perangkat tidak didukung , Perangkat ini adalah $devicename . Membatalkan... !";
	elif [ "$REG" = "JAV" ];then
	abort "! Piranti ora didukung , Piranti iki $devicename . Batal... !";
	elif [ "$REG" = "SUN" ];then
	abort "! Paranti henteu dirojong , Paranti ieu $devicename . Ngabatalkeun... !";
	elif [ "$REG" = "HI" ];then
	abort "! Yeh device $devicename asamarthit hai. Prakriya samapt... !";
	elif [ "$REG" = "EN" ];then
    abort "! Unsupported device , This Device is $devicename . Aborting... !";
	fi;
  fi;
}
int2ver() {
  if $BB [ "$1" -eq "$1" ] 2>/dev/null; then
    echo "$1.0.0";
  elif [ ! "$(echo "$1" | $BB cut -d. -f3)" ]; then
    echo "$1.0";
  else
    echo "$1";
  fi;
}
do_versioncheck() {
  [ "$(file_getprop anykernel.sh supported.versions)" ] || return 1;
  local android_ver hi_ver lo_ver parsed_ver supported supported_ver;
  supported_ver=$(file_getprop anykernel.sh supported.versions | $BB tr -d '[:space:]');
  android_ver=$(file_getprop /system/build.prop ro.build.version.release);
  parsed_ver=$(int2ver $android_ver);
  if echo $supported_ver | $BB grep -q '-'; then
    lo_ver=$(int2ver "$(echo $supported_ver | $BB cut -d- -f1)");
    hi_ver=$(int2ver "$(echo $supported_ver | $BB cut -d- -f2)");
    if echo -e "$hi_ver\n$lo_ver\n$parsed_ver" | $BB sort -g | $BB grep -n "$parsed_ver" | $BB grep -q '^2:'; then
      supported=1;
    fi;
  else
    for ver in $(echo $supported_ver | $BB sed 's;,; ;g'); do
      if [ "$(int2ver $ver)" == "$parsed_ver" ]; then
        supported=1;
        break;
      fi;
    done;
  fi;
  if [ "$REG" = "IDN" ];then
  ui_print "- Memeriksa Versi Android...";
  ui_print "- Versi Android: $android_ver ";
  elif [ "$REG" = "JAV" ];then
  ui_print "- Priksa Versi Android...";
  ui_print "- Versi Android: $android_ver ";
  elif [ "$REG" = "SUN" ];then
  ui_print "- Pariksa Versi Android...";
  ui_print "- Versi Android: $android_ver ";
  elif [ "$REG" = "HI" ];then
  ui_print "- Android version ki jaanch jaari...";
  ui_print "- Android Version: $android_ver ";
  elif [ "$REG" = "EN" ];then
  ui_print "- Checking Android Version...";
  ui_print "- Android Version: $android_ver ";
  fi;
  if [ "$supported" ]; then
	ui_print "- OK !";
  else
	if [ "$REG" = "IDN" ];then
	abort "! Versi Android tidak Kompatibel, Kernel ini hanya untuk Android $supported_ver saja . Membatalkan... !";
	elif [ "$REG" = "JAV" ];then
    abort "! Versi Android ora Kompatibel, Kernel iki mung kanggo $supported_ver wae . Batal... !";
	elif [ "$REG" = "SUN" ];then
    abort "! Versi Android anu teu cocog, Kernel leu kanggo $supported_ver hungkul . Ngabatalkeun... !";
	elif [ "$REG" = "HI" ];then
    abort "! Yeh android version asamarthit hai, Yeh kernel sirf Android $supported_ver ke lie hai. Prakriya samapt... !";
	elif [ "$REG" = "EN" ];then
    abort "! Unsupported Android version, This kernel only for Android $supported_ver . Aborting... !";
	fi;
  fi;
}
do_levelcheck() {
  [ "$(file_getprop anykernel.sh supported.patchlevels)" ] || return 1;
  local android_lvl hi_lvl lo_lvl parsed_lvl supported_lvl;
  ui_print "Checking Android security patch level...";
  supported_lvl=$(file_getprop anykernel.sh supported.patchlevels | $BB grep -oE '[0-9]{4}-[0-9]{2}|-');
  android_lvl=$(file_getprop /system/build.prop ro.build.version.security_patch);
  parsed_lvl=$(echo $android_lvl | $BB grep -oE '[0-9]{4}-[0-9]{2}');
  if echo $supported_lvl | $BB grep -q '^\-'; then
    lo_lvl=0000-00;
    hi_lvl=$(echo $supported_lvl | $BB awk '{ print $2 }');
  elif echo $supported_lvl | $BB grep -q ' - '; then
    lo_lvl=$(echo $supported_lvl | $BB awk '{ print $1 }');
    hi_lvl=$(echo $supported_lvl | $BB awk '{ print $3 }');
  elif echo $supported_lvl | $BB grep -q '\-$'; then
    lo_lvl=$(echo $supported_lvl | $BB awk '{ print $1 }');
    hi_lvl=9999-99;
  fi;
  if echo -e "$hi_lvl\n$lo_lvl\n$parsed_lvl" | $BB sort -g | $BB grep -n "$parsed_lvl" | $BB grep -q '^2:'; then
    ui_print "$android_lvl" " ";
  else
    abort " " "Unsupported Android security patch level. Aborting...";
  fi;
}
dump_moduleinfo() {
$BB cat <<EOF > $1;
name=AK3 Helper Module
version=$($BB awk '{ print $3 }' $AKHOME/vertmp) $($BB grep -oE '#.[0-9]' $AKHOME/vertmp)
versionCode=1
author=AnyKernel3
description=$KERNEL_STRING
EOF
}
dump_moduleremover() {
$BB cat <<'EOF' > $1;
#!/system/bin/sh
MODDIR=${0%/*};
if [ "$(cat /proc/version)" != "$(cat $MODDIR/version)" ]; then
  rm -rf $MODDIR;
fi;
EOF
}
do_modules() {
  [ "$(file_getprop anykernel.sh do.modules)" == 1 ] || return 1;
  local block modcon moddir modtarget module slot umask;
  if [ "$(file_getprop anykernel.sh do.systemless)" == 1 ]; then
    cd $AKHOME/modules;
    ui_print " " "Creating kernel helper Magisk module...";
    if [ -d /data/adb/magisk -a -f $AKHOME/magisk_patched ]; then
      umask=$(umask);
      umask 022;
      moddir=/data/adb/modules/ak3-helper;
      $BB rm -rf $moddir;
      $BB mkdir -p system $moddir;
      ($BB mv -f product system;
      $BB mv -f vendor system) 2>/dev/null;
      $BB cp -rLf * $moddir;
      dump_moduleinfo $moddir/module.prop;
      dump_moduleremover $moddir/post-fs-data.sh;
      $BB cp -f $AKHOME/vertmp $moddir/version;
      umask $umask;
    else
      ui_print "Magisk installation not found. Skipped!";
    fi;
  else
    cd $AKHOME/modules;
    ui_print " " "Pushing modules...";
    if [ -d /dev/block/mapper ]; then
      for block in system vendor product; do
        for slot in "" _a _b; do
          $BB blockdev --setrw /dev/block/mapper/$block$slot 2>/dev/null;
        done;
      done;
    fi;
    if [ ! -d /postinstall/tmp ]; then
      $BB mount -o rw,remount -t auto /system;
      ($BB mount -o rw,remount -t auto /vendor;
      $BB mount -o rw,remount -t auto /product) 2>/dev/null;
    fi;
    for module in $($BB find . -name '*.ko'); do
      modtarget=$POSTINSTALL$(echo $module | $BB cut -c2-);
      if [ ! -e $modtarget ]; then
        case $module in
          */vendor/*) modcon=vendor;;
          */product/*) modcon=product;;
          *) modcon=system;;
        esac;
      fi;
      if is_mounted $modtarget; then
        $BB mount -o rw,remount -t auto $modtarget;
      fi;
      $BB mkdir -p $($BB dirname $modtarget);
      $BB cp -rLf $module $modtarget;
      $BB chown 0:0 $modtarget;
      $BB chmod 644 $modtarget;
      if [ "$modcon" ]; then
        chcon "u:object_r:${modcon}_file:s0" $modtarget;
      fi;
      if is_mounted $modtarget; then
        $BB mount -o ro,remount -t auto $modtarget;
      fi;
    done;
    if [ ! -d /postinstall/tmp ]; then
      $BB mount -o ro,remount -t auto /system;
      ($BB mount -o ro,remount -t auto /vendor;
      $BB mount -o ro,remount -t auto /product) 2>/dev/null;
    fi;
  fi;
  cd $AKHOME;
}

DoneProcess(){
if [ "$REG" = "IDN" ];then
ui_print "- Selesai";
elif [ "$REG" = "JAV" ];then
ui_print "- Rampung";
elif [ "$REG" = "SUN" ];then
ui_print "- Parantos";
elif [ "$REG" = "EN" ];then
ui_print "- Done";
fi;
}

AddSpectrum(){
# custom script for spectrum
  $BB mount -o rw,remount -t auto /system;
  $BB mount -o rw,remount -t auto /vendor 2>/dev/null;
  
if [ "`$BB grep -w "selected.1=1" /tmp/aroma-data/spectrum.prop`" ] && [ -e $AKHOME/spectrum/init.spectrum.rc ];then
  cd $AKHOME;

  # add spectrum support
  if [ "$REG" = "IDN" ];then
  ui_print "- Mencadangkan Skrip Lama...";
  elif [ "$REG" = "JAV" ];then
  ui_print "- Gawe Serep Skrip sing lawas...";
  elif [ "$REG" = "SUN" ];then
  ui_print "- Nyadangkeun Skrip Lama...";
  elif [ "$REG" = "HI" ];then
  ui_print "- Poorane Script ka backup prakriya suru...";
  elif [ "$REG" = "EN" ];then
  ui_print "- Backing up Old Script in Progress...";
  fi;
    if [ ! -e /vendor/etc/init/hw/init.qcom.rc.backup ];then
      cp -af /vendor/etc/init/hw/init.qcom.rc /vendor/etc/init/hw/init.qcom.rc.backup
    fi
    if [ ! -e /vendor/etc/init/hw/init.spectrum.rc.backup ];then
      cp -af /vendor/etc/init/hw/init.spectrum.rc /vendor/etc/init/hw/init.spectrum.rc.backup
    fi
	if [ "$REG" = "IDN" ];then
	ui_print "- Menambal init.qcom.rc...";
	elif [ "$REG" = "JAV" ];then
	ui_print "- Nambahi init.qcom.rc...";
	elif [ "$REG" = "SUN" ];then
	ui_print "- Nambal init.qcom.rc...";
	elif [ "$REG" = "HI" ];then
	ui_print "- init.qcom.rc ke Patching prakriya suru...";
	elif [ "$REG" = "EN" ];then
	ui_print "- Patching init.qcom.rc...";
	fi;
    grep "import /init.spectrum.rc" /vendor/etc/init/hw/init.qcom.rc >/dev/null | sed -i '/import \/init.spectrum.rc/d' /vendor/etc/init/hw/init.qcom.rc
    grep "import init.spectrum.rc" /vendor/etc/init/hw/init.qcom.rc >/dev/null | sed -i '/import init.spectrum.rc/d' /vendor/etc/init/hw/init.qcom.rc
    grep "import /vendor/etc/init/hw/init.spectrum.rc" /vendor/etc/init/hw/init.qcom.rc >/dev/null || sed -i '1,/.*import.*/s/.*import.*/import \/vendor\/etc\/init\/hw\/init.spectrum.rc\n&/' /vendor/etc/init/hw/init.qcom.rc
    if [ "$REG" = "IDN" ];then
	ui_print "- Menambal Skrip Spektrum...";
	elif [ "$REG" = "JAV" ];then
	ui_print "- Nambahi Skrip Spektrum...";
	elif [ "$REG" = "SUN" ];then
	ui_print "- Nambal Skrip Spektrum...";
	elif [ "$REG" = "HI" ];then
	ui_print "- Script Spectrum ke Patching prakriya suru...";
	elif [ "$REG" = "EN" ];then
	ui_print "- Patching Spectrum Script...";
	fi
	cp -af $AKHOME/spectrum/init.spectrum.rc /vendor/etc/init/hw/
    chmod -R 644 /vendor/etc/init/hw/init.spectrum.rc
	cp -af $AKHOME/spectrum/init.spectrum.sh /vendor/bin/
    chmod -R 755 /vendor/bin/init.spectrum.sh
    # cprofile remover
    if [ -e /system/xbin/cprofile ];then
      rm -rf /system/xbin/cprofile
      ui_print "remove /system/xbin/cprofile"
    fi
    if [ -e /system/bin/cprofile ];then
      rm -rf /system/bin/cprofile
      ui_print "remove /system/bin/cprofile"
    fi
    if [ -e /vendor/bin/cprofile ];then
      rm -rf /vendor/bin/cprofile
      ui_print "remove /vendor/bin/cprofile"
    fi
    if [ -e /system/init.spectrum.rc ];then
      rm -rf /system/init.spectrum.rc
      ui_print "remove /system/init.spectrum.rc"
    fi
    if [ -e /system/init.spectrum.sh ];then
      rm -rf /system/init.spectrum.sh
      ui_print "remove /system/init.spectrum.sh"
	fi
  elif [ "`$BB grep -w "selected.1=2" /tmp/aroma-data/spectrum.prop`" ] || [ ! -e $AKHOME/spectrum/init.spectrum.rc ];then
    if [ -e /vendor/etc/init/hw/init.spectrum.rc ];then
	  if [ "$REG" = "IDN" ];then
	  ui_print "- Menghapus Skrip Spectrum Lama..."
	  elif [ "$REG" = "JAV" ];then
	  ui_print "- Mbusake Skrip Spektrum sing lawas..."
	  elif [ "$REG" = "SUN" ];then
	  ui_print "- Ngaleungitkeun skrip spéktrum lami..."
	  elif [ "$REG" = "HI" ];then
	  ui_print "- Poorane Spectrum Script ka hatane jane wale prakriya suru..."
	  elif [ "$REG" = "EN" ];then
	  ui_print "- Removing old Spectrum Script..."
	  fi
      rm -rf /vendor/etc/init/hw/init.spectrum.rc
	  if [ -e /vendor/bin/init.spectrum.sh ];then
      rm -rf /vendor/bin/init.spectrum.sh
      fi
    fi
    if [ -e /vendor/etc/init/hw/init.qcom.rc.backup ];then
      cp -af /vendor/etc/init/hw/init.qcom.rc.backup /vendor/etc/init/hw/init.qcom.rc
      rm -rf /vendor/etc/init/hw/init.qcom.rc.backup
      grep "import /vendor/etc/init/hw/init.spectrum.rc" /vendor/etc/init/hw/init.qcom.rc >/dev/null | sed -i '/import \/vendor\/etc\/init\/hw\/init.spectrum.rc/d' /vendor/etc/init/hw/init.qcom.rc
    fi
  fi
  $BB mount -o ro,remount -t auto /system;
  $BB mount -o ro,remount -t auto /vendor 2>/dev/null;
}

RestorePerfHAL() {
	$BB mount -o rw,remount -t auto /system;
    $BB mount -o rw,remount -t auto /vendor 2>/dev/null;
	
	if [ -f /vendor/etc/perf/targetresourceconfigs.xml.bkp ] || [ -f /vendor/etc/perf/targetconfig.xml.bkp ] || [ -f /vendor/etc/perf/perfboostsconfig.xml.bkp ] || [ -f /vendor/etc/perf/commonresourceconfigs.xml.bkp ];then
	if [ "$REG" = "IDN" ];then
    ui_print "- Mengembalikan Perf HAL lama...";
    elif [ "$REG" = "JAV" ];then
    ui_print "- Mulihke Perf HAL lawas...";
    elif [ "$REG" = "SUN" ];then
    ui_print "- Malikkeun Perf HAL lami...";
    elif [ "$REG" = "HI" ];then
    ui_print "- Puraanee Perf HAL ko punarsthaapit karana...";
    elif [ "$REG" = "EN" ];then
    ui_print "- Restoring old Perf HAL...";
    fi;
	mv -f /vendor/etc/perf/targetresourceconfigs.xml.bkp /vendor/etc/perf/targetresourceconfigs.xml
	mv -f /vendor/etc/perf/targetconfig.xml.bkp /vendor/etc/perf/targetconfig.xml
	mv -f /vendor/etc/perf/perfboostsconfig.xml.bkp /vendor/etc/perf/perfboostsconfig.xml
	mv -f /vendor/etc/perf/commonresourceconfigs.xml.bkp /vendor/etc/perf/commonresourceconfigs.xml
	rm -f /vendor/etc/perf/perfconfigstore.xml
	if [ "`$BB grep -w "selected.2=4" /tmp/aroma-data/spectrum.prop`" ]; then
	DoneProcess
	fi
	else
	if [ "$REG" = "IDN" ];then
    ui_print "! Perf HAL Lama tidak ditemukan. !";
    elif [ "$REG" = "JAV" ];then
    ui_print "! Perf HAL lawas ora ditemokke. !";
    elif [ "$REG" = "SUN" ];then
    ui_print "! Perf HAL lami teu kapendak. !";
    elif [ "$REG" = "HI" ];then
    ui_print "! Puraanee Perf HAL nahin mileen. !";
    elif [ "$REG" = "EN" ];then
    ui_print "! Old Perf HAL not found. !";
    fi;
	if [ "`$BB grep -w "selected.2=4" /tmp/aroma-data/spectrum.prop`" ]; then
	if [ "$REG" = "IDN" ];then
    abort "- Membatalkan...";
    elif [ "$REG" = "JAV" ];then
    abort "- Mbatalke...";
    elif [ "$REG" = "SUN" ];then
    abort "- Ngabatalkeun...";
    elif [ "$REG" = "HI" ];then
    abort "- Radd karana...";
    elif [ "$REG" = "EN" ];then
    abort "- Aborting...";
    fi;
	fi;
	fi;
  $BB mount -o ro,remount -t auto /system;
  $BB mount -o ro,remount -t auto /vendor 2>/dev/null;
}

refreshrate() {
if [ "`$BB grep -w "selected.1=1" /tmp/aroma-data/refrate.prop`" ];then
RR=48
elif [ "`$BB grep -w "selected.1=2" /tmp/aroma-data/refrate.prop`" ];then
RR=50
elif [ "`$BB grep -w "selected.1=3" /tmp/aroma-data/refrate.prop`" ];then
RR=55
elif [ "`$BB grep -w "selected.1=5" /tmp/aroma-data/refrate.prop`" ];then
RR=62
elif [ "`$BB grep -w "selected.1=6" /tmp/aroma-data/refrate.prop`" ];then
RR=64
elif [ "`$BB grep -w "selected.1=7" /tmp/aroma-data/refrate.prop`" ];then
RR=65
elif [ "`$BB grep -w "selected.1=8" /tmp/aroma-data/refrate.prop`" ];then
RR=67
elif [ "`$BB grep -w "selected.1=9" /tmp/aroma-data/refrate.prop`" ];then
RR=68
elif [ "`$BB grep -w "selected.1=10" /tmp/aroma-data/refrate.prop`" ];then
RR=69
elif [ "`$BB grep -w "selected.1=11" /tmp/aroma-data/refrate.prop`" ];then
RR=70
elif [ "`$BB grep -w "selected.1=12" /tmp/aroma-data/refrate.prop`" ];then
RR=72
else
RR=60
fi

dtc=$AKHOME/tools/dtc
dtp=$AKHOME/tools/dtp
screen=$RR
$BB dd if=/dev/block/bootdevice/by-name/boot of=$AKHOME/tools/boot.img

ui_print "- Refresh Rate: $screen Hz.";

if [ "$RR" = "60" ]; then
if [ "$REG" = "IDN" ];then
ui_print "- Melompati Modifikasi Refresh Rate ...";
elif [ "$REG" = "JAV" ];then
ui_print "- Nglumpati Modifikasi Refresh Rate ...";
elif [ "$REG" = "SUN" ];then
ui_print "- Ngalangkungan Modifikasi Refresh Rate ...";
elif [ "$REG" = "EN" ];then
ui_print "- Skipping Modify Refresh Rate ...";
fi;
else
if [ "$REG" = "IDN" ] || [ "$REG" = "SUN" ] || [ "$REG" = "JAV" ];then
ui_print "- Memodifikasi Refresh Rate ...";
elif [ "$REG" = "EN" ];then
ui_print "- Modifying Refresh Rate ...";
fi;
$AKHOME/tools/magiskboot unpack $AKHOME/tools/boot.img
$dtp -i kernel_dtb
if [ "$?" != "0" ]; then
abortrefrate=1
else
# decompile dtb
dtb_count=$(ls -lh kernel_dtb-* | wc -l)
board_id=$($BB cat /proc/device-tree/qcom,board-id | $BB xxd -p | $BB xargs echo | $BB sed 's/ //g' | $BB sed 's/.\{8\}/&\n/g' | $BB sed 's/^0\{6\}/0x/g' | $BB sed 's/^0\{5\}/0x/g' | $BB sed 's/^0\{4\}/0x/g' | $BB sed 's/^0\{3\}/0x/g' | $BB sed 's/^0\{2\}/0x/g' | $BB sed 's/^0\{1\}x*/0x/g' | $BB tr '\n' ' ' | $BB sed 's/ *$/\n/g')
msm_id=$($BB cat /proc/device-tree/qcom,msm-id | $BB xxd -p | $BB xargs echo | $BB sed 's/ //g' | $BB sed 's/.\{8\}/&\n/g' | $BB sed 's/^0\{6\}/0x/g' | $BB sed 's/^0\{5\}/0x/g' | $BB sed 's/^0\{4\}/0x/g' | $BB sed 's/^0\{3\}/0x/g' | $BB sed 's/^0\{2\}/0x/g' | $BB sed 's/^0\{1\}x*/0x/g' | $BB tr '\n' ' ' | $BB sed 's/ *$/\n/g')

i=0
while [ $i -lt $dtb_count ]; do
	$dtc -q -I dtb -O dts kernel_dtb-$i -o $AKHOME/tools/kernel_dtb_$i.dts
	dts_board_id=$($BB cat $AKHOME/tools/kernel_dtb_$i.dts | $BB grep qcom,board-id | $BB sed -e 's/[\t]*qcom,board-id = <//g' | $BB sed 's/>;//g')
	dts_msm_id=$($BB cat $AKHOME/tools/kernel_dtb_$i.dts | $BB grep qcom,msm-id | $BB sed -e 's/[\t]*qcom,msm-id = <//g' | $BB sed 's/>;//g')
	if [ "$dts_board_id" = "$board_id" ] && [ "$dts_msm_id" = "$msm_id" ]; then
		break
	fi
	$BB rm -f $AKHOME/tools/kernel_dtb_$i.dts
	i=$((i + 1))
done
fi
case $i in
$dtb_count)
abortrefrate=1
;;
esac

if [ "$abortrefrate" = "1" ]; then
if [ "$REG" = "IDN" ] || [ "$REG" = "SUN" ] || [ "$REG" = "JAV" ];then
ui_print "- Gagal Memodifikasi Refresh Rate ...";
elif [ "$REG" = "EN" ];then
ui_print "- Failed to Modify Refresh Rate ...";
fi;
else
# screen refresh rate
srr=qcom,mdss-dsi-panel-framerate
max_srr=qcom,mdss-dsi-max-refresh-rate
nsrr_=$(printf "0x%x" $screen)
$BB sed -i "s/$srr = <[^)]*>/$srr = <$nsrr_>/g" $AKHOME/tools/kernel_dtb_$i.dts
$BB sed -i "s/$max_srr = <[^)]*>/$max_srr = <$nsrr_>/g" $AKHOME/tools/kernel_dtb_$i.dts

# compile dts to dtb
$dtc -q -I dts -O dtb $AKHOME/tools/kernel_dtb_$i.dts -o kernel_dtb-$i

# generate new dtb
i=0
> kernel_dtb
while [ $i -lt $dtb_count ]; do
	$BB cat kernel_dtb-$i >> kernel_dtb
	i=$((i + 1))
done

$AKHOME/tools/magiskboot repack $AKHOME/tools/boot.img
$BB dd if=new-boot.img of=/dev/block/bootdevice/by-name/boot
$BB rm -f kernel_dtb-*
$BB rm -f new-boot.img
fi
fi
}

DoubleTapWake() {
$BB mount -o rw,remount -t auto /system;
$BB mount -o rw,remount -t auto /vendor 2>/dev/null;
	
if [ "`$BB grep -w "selected.2=1" /tmp/aroma-data/spectrum.prop`" ]; then
	if [ "$REG" = "IDN" ];then
	ui_print "- Menghidupkan Paksa DT2W ...";
	elif [ "$REG" = "JAV" ];then
	ui_print "- Ngaktifke Peksa DT2W ...";
	elif [ "$REG" = "SUN" ];then
	ui_print "- Maksa Ngaktipkeun DT2W ...";
	elif [ "$REG" = "EN" ];then
	ui_print "- Force Enabling DT2W ...";
	fi;
	DTTWScriptFile="/tmp/dttwpatch"
	DTTWInitFile="/tmp/dttwinit"
	$BB echo '#! /system/bin/sh' >> $DTTWScriptFile
	$BB echo '' >> $DTTWScriptFile
	$BB echo '# DT2W Enabler Script by RyuujiX' >> $DTTWScriptFile
	$BB echo '' >> $DTTWScriptFile
	$BB echo '# Set Permissions of DT2W' >> $DTTWScriptFile
	$BB echo 'chmod -R 644 /sys/kernel/touchpanel/dclicknode' >> $DTTWScriptFile
	$BB echo 'chmod -R 644 /proc/tpd_gesture' >> $DTTWScriptFile
	$BB echo 'chmod -R 644 /proc/touchpanel/double_tap_enable' >> $DTTWScriptFile
	$BB echo '# Enable DT2W' >> $DTTWScriptFile
	$BB echo 'echo "1" > /sys/kernel/touchpanel/dclicknode' >> $DTTWScriptFile
	$BB echo 'echo "1" > /proc/tpd_gesture' >> $DTTWScriptFile
	$BB echo 'echo "1" > /proc/touchpanel/double_tap_enable' >> $DTTWScriptFile
	$BB echo '# DT2W Enabler Patch Init by RyuujiX' >> $DTTWInitFile
	$BB echo '' >> $DTTWInitFile
	$BB echo 'on boot' >> $DTTWInitFile
	$BB echo '  exec u:r:init:s0 root root -- /vendor/bin/patch_dttw.sh' >> $DTTWInitFile
	$BB echo '  exec u:r:su:s0 root root -- /vendor/bin/patch_dttw.sh' >> $DTTWInitFile
	$BB echo '' >> $DTTWInitFile
	$BB echo 'on property:sys.boot_completed=1' >> $DTTWInitFile
	$BB echo '  exec u:r:init:s0 root root -- /vendor/bin/patch_dttw.sh' >> $DTTWInitFile
	$BB echo '  exec u:r:su:s0 root root -- /vendor/bin/patch_dttw.sh' >> $DTTWInitFile
	cp -af $DTTWInitFile /vendor/etc/init/hw/init.forcedttw.rc
    chmod -R 644 /vendor/etc/init/hw/init.forcedttw.rc
	cp -af $DTTWScriptFile /vendor/bin/patch_dttw.sh
    chmod -R 644 /vendor/bin/patch_dttw.sh
	grep "import /init.forcedttw.rc" /vendor/etc/init/hw/init.qcom.rc >/dev/null | sed -i '/import \/init.forcedttw.rc/d' /vendor/etc/init/hw/init.qcom.rc
    grep "import init.forcedttw.rc" /vendor/etc/init/hw/init.qcom.rc >/dev/null | sed -i '/import init.forcedttw.rc/d' /vendor/etc/init/hw/init.qcom.rc
    grep "import /vendor/etc/init/hw/init.forcedttw.rc" /vendor/etc/init/hw/init.qcom.rc >/dev/null || sed -i '1,/.*import.*/s/.*import.*/import \/vendor\/etc\/init\/hw\/init.forcedttw.rc\n&/' /vendor/etc/init/hw/init.qcom.rc
elif [ "`$BB grep -w "selected.2=2" /tmp/aroma-data/spectrum.prop`" ]; then
	if [ "$REG" = "IDN" ];then
	ui_print "- Menghapus Paksaan DT2W ...";
	elif [ "$REG" = "JAV" ];then
	ui_print "- Mbusakke Peksaan DT2W ...";
	elif [ "$REG" = "SUN" ];then
	ui_print "- Ngaleungitkeun Maksaan DT2W ...";
	elif [ "$REG" = "EN" ];then
	ui_print "- Removing Forced DT2W ...";
	fi;
	if [ -e /vendor/etc/init/hw/init.forcedttw.rc ]; then
	rm -rf /vendor/etc/init/hw/init.forcedttw.rc
	else
	if [ "$REG" = "IDN" ];then
    ui_print "! Skrip Paksaan DT2W tidak ditemukan. !";
    elif [ "$REG" = "JAV" ];then
    ui_print "! Skrip Peksaan DT2W ora ditemokke. !";
    elif [ "$REG" = "SUN" ];then
    ui_print "! Skrip Maksaan DT2W teu kapendak. !";
    elif [ "$REG" = "EN" ];then
    ui_print "! Force DT2W Script not found. !";
    fi;
	fi;
fi;

  $BB mount -o ro,remount -t auto /system;
  $BB mount -o ro,remount -t auto /vendor 2>/dev/null;

if [ "`$BB grep -w "selected.1=2" /tmp/aroma-data/dummy.prop`" ]; then
DoneProcess
fi;
}

PatchRAM(){
$BB mount -o rw,remount -t auto /system;
$BB mount -o rw,remount -t auto /vendor 2>/dev/null;

if [ "`$BB grep -w "selected.4=1" /tmp/aroma-data/spectrum.prop`" ]; then
	if [ "$REG" = "IDN" ];then
    ui_print "- Menghapus Tambalan RAM...";
    elif [ "$REG" = "JAV" ];then
    ui_print "- Mbusake Tambelan RAM...";
    elif [ "$REG" = "SUN" ];then
    ui_print "- Ngaleungitkeun Tambalan RAM";
    elif [ "$REG" = "EN" ];then
    ui_print "- Removing RAM Patch...";
    fi;
	
	if [ -e /vendor/etc/init/hw/init.rampatch.rc ]; then
	rm -f /vendor/etc/init/hw/init.rampatch.rc
	rm -f /vendor/bin/patch_ram.sh
	elif [ -e /data/adb/service.d/12_ryuu_ram_patch ]; then
	rm -f /data/adb/service.d/12_ryuu_ram_patch
	else
	if [ "$REG" = "IDN" ];then
    ui_print "! Tambalan RAM tidak ditemukan. !";
    elif [ "$REG" = "JAV" ];then
    ui_print "! Tambelan RAM ora ditemokke. !";
    elif [ "$REG" = "SUN" ];then
    ui_print "! Tambalan RAM teu kapendak. !";
    elif [ "$REG" = "EN" ];then
    ui_print "! RAM Patch not found. !";
    fi;
	fi
	
	if [ "`$BB grep -w "selected.1=3" /tmp/aroma-data/dummy.prop`" ]; then
	DoneProcess
	fi
	
elif [ "`$BB grep -w "selected.4=2" /tmp/aroma-data/spectrum.prop`" ]; then
RAMPatchMode="Magisk"
elif [ "`$BB grep -w "selected.4=3" /tmp/aroma-data/spectrum.prop`" ]; then
RAMPatchMode="Init"
fi
if [ ! -z "$RAMPatchMode" ];then
TotalRAM="$($BB awk '/MemTotal/ { print $2 }' /proc/meminfo | cut -c -2)"
RAMScriptFile="/tmp/rampatch"
RAMInitFile="/tmp/raminit"

if [ "$TotalRAM" = "28" ];then
	ui_print "- RAM Total: 3 GB"
	MinFreeValue="1536,2048,4096,5120,10240,15000"
else
	if [ "$TotalRAM" = "38" ];then
	ui_print "- RAM Total: 4 GB"
	else
	ui_print "- RAM Total: 6 GB"
	fi
	MinFreeValue="25600,34560,38400,52224,71680,84480"
fi

	if [ "$REG" = "IDN" ];then
	ui_print "- Menambal RAM ($RAMPatchMode) ...";
	elif [ "$REG" = "JAV" ] || [ "$REG" = "SUN" ];then
	ui_print "- Nambal RAM ($RAMPatchMode) ...";
	elif [ "$REG" = "EN" ];then
	ui_print "- Patching RAM ($RAMPatchMode) ...";
	fi;

$BB echo '#! /system/bin/sh' >> $RAMScriptFile
$BB echo '' >> $RAMScriptFile
$BB echo '# RAM Patch Script by RyuujiX' >> $RAMScriptFile
$BB echo "# Inspired from R0thbaby's and Pk's RAM Patch" >> $RAMScriptFile
$BB echo '' >> $RAMScriptFile
$BB echo '# Set LMK Parameters' >> $RAMScriptFile
$BB echo 'echo "0" > /sys/module/lowmemorykiller/parameters/lmk_fast_run' >> $RAMScriptFile
$BB echo 'echo "0" > /sys/module/lowmemorykiller/parameters/enable_adaptive_lmk' >> $RAMScriptFile
$BB echo "echo '$MinFreeValue' > /sys/module/lowmemorykiller/parameters/minfree" >> $RAMScriptFile
$BB echo '# Disabling LMK Parameters that will cause parameters to be modified.' >> $RAMScriptFile
$BB echo "chmod -R 444 /sys/module/lowmemorykiller/parameters/*" >> $RAMScriptFile
if [ "$RAMPatchMode" = "Magisk" ];then
if [ ! -e /data/adb/service.d ]; then
mkdir -p /data/adb/service.d
chmod -R 755 /data/adb/service.d
else
rm -f /data/adb/service.d/12_ryuu_ram_patch
fi
mv -f $RAMScriptFile /data/adb/service.d/12_ryuu_ram_patch
chmod -R 755 /data/adb/service.d/12_ryuu_ram_patch
elif [ "$RAMPatchMode" = "Init" ];then
$BB echo '# RAM Patch Init by RyuujiX' >> $RAMInitFile
$BB echo "# Inspired from R0thbaby's and Pk's RAM Patch" >> $RAMInitFile
$BB echo '' >> $RAMInitFile
$BB echo 'on boot' >> $RAMInitFile
$BB echo '  exec u:r:init:s0 root root -- /vendor/bin/patch_ram.sh' >> $RAMInitFile
$BB echo '  exec u:r:su:s0 root root -- /vendor/bin/patch_ram.sh' >> $RAMInitFile
$BB echo '' >> $RAMInitFile
$BB echo 'on property:sys.boot_completed=1' >> $RAMInitFile
$BB echo '  exec u:r:init:s0 root root -- /vendor/bin/patch_ram.sh' >> $RAMInitFile
$BB echo '  exec u:r:su:s0 root root -- /vendor/bin/patch_ram.sh' >> $RAMInitFile
mv -f $RAMInitFile /vendor/etc/init/hw/init.rampatch.rc
chmod -R 644 /vendor/etc/init/hw/init.rampatch.rc
mv -f $RAMScriptFile /vendor/bin/patch_ram.sh
chmod -R 755 /vendor/bin/patch_ram.sh
grep "import /init.rampatch.rc" /vendor/etc/init/hw/init.qcom.rc >/dev/null | sed -i '/import \/init.rampatch.rc/d' /vendor/etc/init/hw/init.qcom.rc
grep "import init.rampatch.rc" /vendor/etc/init/hw/init.qcom.rc >/dev/null | sed -i '/import init.rampatch.rc/d' /vendor/etc/init/hw/init.qcom.rc
grep "import /vendor/etc/init/hw/init.rampatch.rc" /vendor/etc/init/hw/init.qcom.rc >/dev/null || sed -i '1,/.*import.*/s/.*import.*/import \/vendor\/etc\/init\/hw\/init.rampatch.rc\n&/' /vendor/etc/init/hw/init.qcom.rc
fi

if [ "`$BB grep -w "selected.1=3" /tmp/aroma-data/dummy.prop`" ]; then
DoneProcess
fi;
else
	if [ "$REG" = "IDN" ];then
	ui_print "- Melompati Tambal RAM ...";
	elif [ "$REG" = "JAV" ];then
	ui_print "- Nglumpati Nambal RAM ...";
	elif [ "$REG" = "SUN" ];then
	ui_print "- Ngalangkungan Nambal RAM ...";
	elif [ "$REG" = "EN" ];then
	ui_print "- Skipping RAM Patch...";
	fi;
fi;

$BB mount -o ro,remount -t auto /system;
$BB mount -o ro,remount -t auto /vendor 2>/dev/null;
}

show_progress 1.34 4;
ui_print " ";
cleanup;
mkdir -p $AKHOME/bin;
cd $AKHOME;
unzip -o "$ZIPFILE";
if [ $? != 0 -o ! "$(ls tools)" ]; then
  abort "Unzip failed. Aborting...";
fi;
for ARCH32 in x86 arm; do
  if [ -d $AKHOME/tools/$ARCH32 ]; then
    BB=$AKHOME/tools/$ARCH32/busybox;
    chmod 755 $BB;
    $BB >/dev/null 2>&1;
    if [ $? == 0 ]; then
      $BB mv -f $AKHOME/tools/$ARCH32/* $AKHOME/tools;
      break;
    fi;
  fi;
done;
BB=$AKHOME/tools/busybox;
chmod 755 $BB;
$BB chmod -R 755 tools bin;
$BB --install -s bin;
if [ $? != 0 -o -z "$(ls bin)" ]; then
  abort "Busybox setup failed. Aborting...";
fi;

# MultiLanguage Support
if [ "`$BB grep -w "selected.0=2" /tmp/aroma-data/lang.prop`" ];then
  REG=IDN;
elif [ "`$BB grep -w "selected.0=3" /tmp/aroma-data/lang.prop`" ];then
  REG=JAV;
elif [ "`$BB grep -w "selected.0=4" /tmp/aroma-data/lang.prop`" ];then
  REG=SUN;
elif [ "`$BB grep -w "selected.0=5" /tmp/aroma-data/lang.prop`" ];then
  REG=HI;
else
  REG=EN;
fi;
	
if [ -f banner ]; then
  ui_printfile banner;
  ui_print " ";
fi;

KERNEL_STRING="$(file_getprop anykernel.sh kernel.string)";
KERNEL_FOR="$(file_getprop anykernel.sh kernel.for)";
KERNEL_COMPILER="$(file_getprop anykernel.sh kernel.compiler)";
KERNEL_MADE="$(file_getprop anykernel.sh kernel.made)";
KERNEL_VERSION="$(file_getprop anykernel.sh kernel.version)";
KERNEL_TYPE="$(file_getprop anykernel.sh kernel.type)";
MESSAGE_WORD="$(file_getprop anykernel.sh message.word)";
BUILD_DATE="$(file_getprop anykernel.sh build.date)";
DEVICE_NAME="$(file_getprop anykernel.sh device.name3)";
BUILD_TYPE="$(file_getprop anykernel.sh build.type)";
if [ "$REG" = "IDN" ];then
ui_print "-- Nama Kernel    : $KERNEL_STRING";
ui_print "-- Versi Kernel   : $KERNEL_VERSION";
ui_print "-- Varian         : $KERNEL_FOR - $KERNEL_TYPE";
ui_print "-- PengKompilasi  : $KERNEL_COMPILER";
ui_print "-- Perangkat      : $DEVICE_NAME";
ui_print "-- Tanggal Build  : $BUILD_DATE";
ui_print "-- Tipe Build     : $BUILD_TYPE";
ui_print "-- DiBuild Oleh   : $KERNEL_MADE";
elif [ "$REG" = "JAV" ];then
ui_print "-- Jeneng Kernel  : $KERNEL_STRING";
ui_print "-- Versi Kernel   : $KERNEL_VERSION";
ui_print "-- Varian         : $KERNEL_FOR - $KERNEL_TYPE";
ui_print "-- Panyusun       : $KERNEL_COMPILER";
ui_print "-- Piranti        : $DEVICE_NAME";
ui_print "-- Tanggal Mbangun: $BUILD_DATE";
ui_print "-- Jinis Mbangun  : $BUILD_TYPE";
ui_print "-- Dibangun Dening: $KERNEL_MADE";
elif [ "$REG" = "SUN" ];then
ui_print "-- Ngaran Kernel    : $KERNEL_STRING";
ui_print "-- Versi Kernel     : $KERNEL_VERSION";
ui_print "-- Varian           : $KERNEL_FOR - $KERNEL_TYPE";
ui_print "-- Panyusun         : $KERNEL_COMPILER";
ui_print "-- Paranti          : $DEVICE_NAME";
ui_print "-- Tanggal Ngawangun: $BUILD_DATE";
ui_print "-- Tipe Ngawangun   : $BUILD_TYPE";
ui_print "-- Diwangun Ku      : $KERNEL_MADE";
elif [ "$REG" = "HI" ];then
ui_print "-- Kernel Ka Naam   : $KERNEL_STRING";
ui_print "-- Kernel Ka Version: $KERNEL_VERSION";
ui_print "-- Kernel Ka Variant: $KERNEL_FOR - $KERNEL_TYPE";
ui_print "-- Clang Ka Naam    : $KERNEL_COMPILER";
ui_print "-- Device Ka Naam   : $DEVICE_NAME";
ui_print "-- Nirman Ka Taarekh: $BUILD_DATE";
ui_print "-- Bild Prakaar     : $BUILD_TYPE";
ui_print "-- Nirmankarta      : $KERNEL_MADE";
elif [ "$REG" = "EN" ];then
ui_print "-- Kernel Name    : $KERNEL_STRING";
ui_print "-- Kernel Version : $KERNEL_VERSION";
ui_print "-- Variant        : $KERNEL_FOR - $KERNEL_TYPE";
ui_print "-- Compiler       : $KERNEL_COMPILER";
ui_print "-- Device         : $DEVICE_NAME";
ui_print "-- Build Date     : $BUILD_DATE";
ui_print "-- Build Type     : $BUILD_TYPE";
ui_print "-- Builded by     : $KERNEL_MADE";
fi;
ui_print "_________________________________________________" " ";
if [ -f version ]; then
  ui_print " ";
  ui_printfile version;
  ui_print " ";
fi;

if [ "$REG" = "IDN" ];then
ui_print "- Menyiapkan Pengaturan Lingkungan ...";
elif [ "$REG" = "JAV" ];then
ui_print "- Nyiyapake Persiyapan Lingkungan ...";
elif [ "$REG" = "SUN" ];then
ui_print "- Nyiapkeun Setelan Lingkungan ...";
elif [ "$REG" = "HI" ];then
ui_print "- Paryavaran Setup Ka Prakriya suru ...";
elif [ "$REG" = "EN" ];then
ui_print "- Preparing Environment Setup ...";
fi;
setup_env;

if [ "`$BB grep -w "selected.2=4" /tmp/aroma-data/spectrum.prop`" ]; then
RestorePerfHAL;
elif [ "`$BB grep -w "selected.1=2" /tmp/aroma-data/dummy.prop`" ]; then
DoubleTapWake;
elif [ "`$BB grep -w "selected.1=3" /tmp/aroma-data/dummy.prop`" ]; then
PatchRAM;
else
do_devicecheck;
do_versioncheck;
do_levelcheck;

if [ "`$BB grep -w "selected.2=1" /tmp/aroma-data/refrate.prop`" ];then
	if [ "$REG" = "IDN" ];then
	ui_print "- Mencadangkan Boot.img...";
	elif [ "$REG" = "JAV" ];then
	ui_print "- Gawe Serep Boot.img...";
	elif [ "$REG" = "SUN" ];then
	ui_print "- Nyadangkeun Boot.img...";
	elif [ "$REG" = "EN" ];then
	ui_print "- Backing up Boot.img ...";
	fi;
	mkdir -p /sdcard/BootBackup
	$BB dd if=/dev/block/bootdevice/by-name/boot of=/sdcard/BootBackup/boot-backup-$(date "+%Y%m%d%H%M%S").img
fi;

if [ "$REG" = "IDN" ];then
ui_print "- Memasang Kernel...";
elif [ "$REG" = "JAV" ];then
ui_print "- Nginstall Kernel...";
elif [ "$REG" = "SUN" ];then
ui_print "- Masang Kernel...";
elif [ "$REG" = "HI" ];then
ui_print "- Kernel Install ka prakriya suru...";
elif [ "$REG" = "EN" ];then
ui_print "- Installing Kernel...";
fi;
CORE=$($BB grep -oE 'ak.*core.sh' anykernel.sh);
[ -f tools/$CORE ] || $BB ln -s $AKHOME/tools/ak*-core.sh $AKHOME/tools/$CORE;
PATH="$AKHOME/bin:$PATH" home=$AKHOME $BB ash anykernel.sh $2;
if [ $? != 0 ]; then
  abort;
fi;

if [ "`$BB grep -w "selected.3=2" /tmp/aroma-data/spectrum.prop`" ] || [ "`$BB grep -w "selected.3=1" /tmp/aroma-data/spectrum.prop`" ];then
if [ "`$BB grep -w "selected.3=2" /tmp/aroma-data/spectrum.prop`" ];then
SELINUXSTATE="Permissive"
elif [ "`$BB grep -w "selected.3=1" /tmp/aroma-data/spectrum.prop`" ];then
SELINUXSTATE="Enforcing"
fi;

if [ "$REG" = "IDN" ];then
ui_print "- SELinux diganti ke: $SELINUXSTATE";
elif [ "$REG" = "JAV" ];then
ui_print "- SELinux diganti dadi: $SELINUXSTATE";
elif [ "$REG" = "SUN" ];then
ui_print "- SELinux digantikeun ka: $SELINUXSTATE";
elif [ "$REG" = "EN" ];then
ui_print "- SELinux switched to: $SELINUXSTATE";
fi;
fi;

do_modules;

# custom script for add spectrum support to kernel
AddSpectrum;
refreshrate;
DoubleTapWake;
RestorePerfHAL;
PatchRAM;

debugging;
restore_env;
if [ "$(file_getprop anykernel.sh do.cleanup)" == 1 ]; then
  cleanup;
fi;

DoneProcess
fi;

ui_print " " "_________________________________________________";
ui_print " " "$MESSAGE_WORD" "_________________________________________________" " ";
fi;
